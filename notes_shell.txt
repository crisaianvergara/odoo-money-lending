<!-- Opening Shell -->
python3 odoo-bin --addons-path=enterprise,addons,custom shell -d db-training -u library_app,library_member --dev xml
<!-- Commands -->
>>> self
res.users(1,)
>>> self._name
'res.users'
>>> self.name
'OdooBot'
>>> self.login
'__system__'
<!-- Closing Shell -->
Ctrl + D

<!-- More commands -->
>>> self.env
<odoo.api.Environment object at 0x7f2df5c5a980>
>>> self.env.cr
<odoo.sql_db.Cursor object at 0x7f2df7267d00>
>>> self.env.user
res.users(1,)
>>> self.env.uid
1
>>> self.env.context
{'lang': 'en_US', 'tz': 'Europe/Brussels'}
>>> self.env.company
res.company(1,)
>>> self.env.companies
res.company(1,)
>>> self.env["res.partner"]
res.partner()
>>> self.env["res.partner"].search([("display_name", "like", "Azure")])
res.partner(14, 26, 33, 27)
>>> self.env.ref('base.user_root')
res.users(1,)
>>> self.env["res.partner"].search([("display_name", "like", "Lumber")])
res.partner(15, 34)
>>> self.env['res.partner'].browse([15,34])
res.partner(15, 34)

>>> self
res.users(1,)
>>> self._name
'res.users'
>>> self.name
'OdooBot'
>>> self.login
'__system__'
>>> self.env
<odoo.api.Environment object at 0x7fe2de8ed000>
>>> self.env.cr
<odoo.sql_db.Cursor object at 0x7fe2dff5fb50>
>>> self.env.user
res.users(1,)
>>> self.env.uid
1
>>> self.env.user.id
1
>>> self.env.context
{'lang': 'en_US', 'tz': 'Europe/Brussels'}
>>> self.env.company
res.company(1,)
>>> self.env.companies
res.company(1,)

## Access other existing models
## Search recordsets
>>> self.env["res.partner"]
res.partner()
>>> self.env["res.partner"].search([("display_name", "like", "Azure")])
res.partner(14, 26, 33, 27)

>>> self.env.ref("base.user_root")
res.users(1,)

Get a reference to the partner models
>>> self.env["res.partner"]
res.partner()
>>> self.env.get("res.partner")
res.partner()

Search recordsets that are active
>>> self.env["res.partner"].search([("display_name", "like", "Lumber")])
res.partner(15, 34)
>>> self.env["res.partner"].browse([15, 34])
res.partner(15, 34)

Grouping
>>> self.env["res.partner"].read_group([("display_name", "like", "Azure")],
    fields=["state_id:count_distinct",], groupby=["country_id"], lazy=False)
[
    {
        '__count': 4,
        'state_id': 1,
        'country_id': (233, <odoo.tools.func.lazy object at 0x7f5c11833b00>),
        '__domain': ['&', ('country_id', '=', 233), ('display_name', 'like', 'Azure')]
    }
]

## Print recordsets
>>> for rec in self:
...     print(rec.name)
... 
OdooBot

>>> self.company_id
res.company(1,)
>>> self.company_id.name
'My Company (San Francisco)'
>>> self.company_id.currency_id
res.currency(2,)
>>> self.company_id.currency_id.name
'USD'

Empty recordsets
>>> self.company_id.parent_id
res.company()
>>> self.company_id.parent_id.name
False

Date and time
>>> self.browse(2).login_date
datetime.datetime(2023, 7, 11, 1, 11, 29, 901304)

Writing records
1. object-style value assignments
>>> root = self.env["res.users"].browse(1)
>>> print(root.name)
OdooBot
>>> root.name = "Superuser"
>>> print(root.name)
Superuser

Date and time
>>> from datetime import date
>>> self.date = date(2020, 12, 11)
>>> self.date
datetime.date(2020, 12, 11)
>>> self.date = "2020-12-02"
>>> self.date
datetime.date(2020, 12, 2)

>>> self.child_ids = None
>>> self.child_ids
res.partner()

>>> mycompany_partner = self.company_id.partner_id
>>> print(mycompany_partner)
res.partner(1,)
>>> myaddress = self.partner_id
>>> print(myaddress)
res.partner(2,)
>>> mycompany_partner.child_ids = mycompany_partner.child_ids | myaddress
>>> print(mycompany_partner.child_ids)
res.partner(39, 40)

2. Using write() method
>>> Partner = self.env["res.partner"]
>>> print(Partner)
res.partner()
>>> recs = Partner.search([("name", "ilike", "Azure")])
>>> print(recs)
res.partner(14,)
>>> recs.write({"comment": "Hello"})
True


